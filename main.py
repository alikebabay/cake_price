#–∏–º–ø–æ—Ä—Ç—ã
import logging
from typing import Final
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler)
import os
from config import TOKEN, BOT_USERNAME, assert_required
from rate_dispatcher import serve_cached_and_update
from cake_dictionary import (
    POPULAR_CURRENCIES, ALIAS_TO_CODE, _norm, _try_iso_code, CANCEL_ALIASES,
    currency_to_iso3,
)
from db import get_wage_doc, upsert_wage_doc  # ‚Üê –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä)


PORT = int(os.getenv("PORT", "8080"))                  # Cloud Run –¥–∞—Å—Ç $PORT
PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")   # —Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏–º URL —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
WEBHOOK_PATH = "/tgwebhook"                            # –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤–µ–±—Ö—É–∫–∞


# –í–∫–ª—é—á–∏–º –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

#—Å–æ—Å—Ç–æ—è–Ω–∏—è - –≥–ª—É–±–∏–Ω–∞ –º–µ–Ω—é
MENU = 1

# üëâ –æ–±—â–∏–π —Ä–µ–∑–æ–ª–≤–µ—Ä: –∞–ª–∏–∞—Å/–Ω–∞–∑–≤–∞–Ω–∏–µ/ISO ‚Üí –∫–æ–¥ –≤–∞–ª—é—Ç—ã
def _resolve_code(text: str) -> str | None:
    key = _norm(text or "")
    return ALIAS_TO_CODE.get(key) or _try_iso_code(key)

#—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
#–∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(code)] for code in sorted(POPULAR_CURRENCIES)]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —Ç–æ—Ä—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 4 –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–º–µ—Ä",
        reply_markup=reply_markup
    )
    return MENU





# ISO-–∫–æ–¥—ã –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ (—Ä–∞–Ω—å—à–µ —Ç—É—Ç –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ .upper())
async def iso_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = (update.message.text or "").strip()
    code = _resolve_code(raw)
    if not code:
        await update.message.reply_text(
            "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–∞–ª—é—Ç—É. –ü—Ä–∏—à–ª–∏—Ç–µ 3-–±—É–∫–≤–µ–Ω–Ω—ã–π ISO-–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: EUR, GBP) "
            "–∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–µ 4 –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã."
        )
        return
    iso3 = currency_to_iso3(code)
    await serve_cached_and_update(update, code, country_iso3=iso3)
    return
# –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ä–µ–∑–æ–ª–≤–µ—Ä)
async def choose_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = (update.message.text or "").strip()

    if _norm(raw) in CANCEL_ALIASES:
        return await cancel(update, context)

    code = _resolve_code(raw)
    if code:
        iso3 = currency_to_iso3(code)
        await serve_cached_and_update(update, code, country_iso3=iso3)
        return MENU

    await update.message.reply_text(
        "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–∞–ª—é—Ç—É. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ ‚Äî –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. "
        "–î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—à–ª–∏—Ç–µ 3-–±—É–∫–≤–µ–Ω–Ω—ã–π ISO-–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: EUR, GBP, TRY) "
        "–∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–µ 4 –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã."
    )
    return MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END
#–¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ç–µ–∫—Å—Ç–æ–º (USD, —Ä—É–±–ª—å, —é–∞–Ω—å) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")

#–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–∞—Ö
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    text: str = update.message.text or ""

    # –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
    if message_type in {"group", "supergroup"}:
        if not BOT_USERNAME or BOT_USERNAME not in text:
            return
        # –≤—ã—Ä–µ–∑–∞–µ–º @bot –∏–∑ —Ç–µ–∫—Å—Ç–∞
        text = text.replace(BOT_USERNAME, "").strip()

    key = _norm(text)

    # –í—ã—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞
    if key in CANCEL_ALIASES:
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    # –í–∞–ª—é—Ç–∞?
    code = ALIAS_TO_CODE.get(key) or _try_iso_code(key)
    if code:
        await serve_cached_and_update(update, code)
        return

    # –ú—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await update.message.reply_text(
        "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–∞–ª—é—Ç—É. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ ‚Äî –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. "
        "–î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—à–ª–∏—Ç–µ ISO-–∫–æ–¥: EUR, GBP, TRY –∏ —Ç.–ø."
    )

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Update %r caused error: %s", update, context.error)

#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TOKEN:
        print("FATAL: TELEGRAM_TOKEN is not set", flush=True)
        raise SystemExit(1)

    print(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... @{BOT_USERNAME}" if BOT_USERNAME else "–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...", flush=True)

    application = Application.builder().token(TOKEN).concurrent_updates(False).build()

# –•–µ–Ω–¥–ª–µ—Ä –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_currency)]},
        fallbacks=[CommandHandler("cancel", cancel)],
        )
    application.add_handler(conv_handler) # group=0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # 2) –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è ISO-–∫–æ–¥–æ–≤ (—Ä–æ–≤–Ω–æ 3 –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã)
    application.add_handler(
        MessageHandler(
            filters.Regex(r"^[A-Za-z]{3}$") & ~filters.COMMAND,
            iso_handler
        )
    )

# –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("custom", custom_command))

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(r"^[A-Za-z]{3}$"), handle_message), group=1)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error)
    # application.add_handler(...)

    if PUBLIC_URL:
        # Cloud Run: —Å–ª—É—à–∞–µ–º HTTP –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=WEBHOOK_PATH.strip("/"),
            webhook_url=f"{PUBLIC_URL}{WEBHOOK_PATH}",
            drop_pending_updates=True,
        )
    else:
        # –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –æ–±—ã—á–Ω—ã–π polling
        application.run_polling(drop_pending_updates=True)



if __name__ == "__main__":
    main()


