#–∏–º–ø–æ—Ä—Ç—ã
import logging
from typing import Final
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler)
import os
from config import TOKEN, BOT_USERNAME, assert_required
from rate_dispatcher import serve_cached_and_update




POPULAR_CURRENCIES = {"USD", "BYN", "UAH", "RUB", "KGS", "UZS", "CNY"}

# –í–∫–ª—é—á–∏–º –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


#—Å–æ—Å—Ç–æ—è–Ω–∏—è - –≥–ª—É–±–∏–Ω–∞ –º–µ–Ω—é
MENU, DISTRICT_SELECTED = range(2)

#—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
#–∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("USD")],
        [KeyboardButton("BYN")],
        [KeyboardButton("UAH")],
        [KeyboardButton("RUB")],
        [KeyboardButton("KGS")],
        [KeyboardButton("UZS")],
        [KeyboardButton("CNY")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —Ç–æ—Ä—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–∏–ª–∏ exit –¥–ª—è –≤—ã—Ö–æ–¥–∞):", reply_markup=reply_markup)
    return MENU
#–≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
async def choose_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()

    if code in POPULAR_CURRENCIES:
        # —Ç—É—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—á–∏—Ç–∞–µ–º —Å–∞–º–∏ ‚Äî –≤—Å—ë –¥–µ–ª–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–∫—ç—à/–∞–ø–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ—Ç–≤–µ—Ç)
        await serve_cached_and_update(update, code)
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")

    return MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    return ConversationHandler.END

#–¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–µ—á–∞—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å")

async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")

#–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç–∞—Ö
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type: str = update.message.chat.type
    text: str = update.message.text

    print(f'User ({update.message.chat.id}) in {message_type}: "{text}"')

    if message_type == "group":
        if BOT_USERNAME in text:
            new_text: str = text.replace(BOT_USERNAME, "").strip()
            response: str = handle_response(new_text)
        else:
            return
    else:
        response: str = handle_response(text)
    print("Bot", response)
    await update.message.reply_text(response)
# üîΩ –î–æ–±–∞–≤–ª—è–µ–º –º—è–≥–∫—É—é –∑–∞–≥–ª—É—à–∫—É
def handle_response(text: str) -> str:
    return (
        "–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, "
        "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å"
    )

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")

#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TOKEN:
        print("FATAL: TELEGRAM_TOKEN is not set", flush=True)
        raise SystemExit(1)

    print(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... @{BOT_USERNAME}" if BOT_USERNAME else "–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...", flush=True)

    application = Application.builder().token(TOKEN).concurrent_updates(False).build()

# –•–µ–Ω–¥–ª–µ—Ä –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_currency)]},
        fallbacks=[CommandHandler("cancel", cancel)],
        )
    application.add_handler(conv_handler)

# –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("custom", custom_command))

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error)

    print("–û–ø—Ä–∞—à–∏–≤–∞–µ–º...", flush=True)
    application.run_polling(drop_pending_updates=True, poll_interval=3)
if __name__ == "__main__":
    main()


